package com.kirill.meetyou.service;

import com.kirill.meetyou.dto.MessageDto;
import com.kirill.meetyou.exception.ResourceNotFoundException;
import com.kirill.meetyou.model.Message;
import com.kirill.meetyou.model.User;
import com.kirill.meetyou.repository.MessageRepository;
import com.kirill.meetyou.repository.UserRepository;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Slf4j
@Service
@RequiredArgsConstructor
public class MessageService {
    private static final String USER_NOT_FOUND_MSG = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
    private static final String USER_NOT_FOUND_LOG = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ID {}";
    private static final String INTERLOCUTOR_NOT_FOUND_LOG = "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: ID {}";
    private static final String TIMESTAMP_PATTERN = "yyyy-MM-dd HH:mm:ss";

    private final MessageRepository messageRepository;
    private final UserRepository userRepository;
    private static final DateTimeFormatter TIMESTAMP_FORMATTER =
            DateTimeFormatter.ofPattern(TIMESTAMP_PATTERN);

    private User findUserOrThrow(Long userId, String errorLog) {
        return userRepository.findById(userId)
                .orElseThrow(() -> {
                    log.error(errorLog, userId);
                    return new ResourceNotFoundException(USER_NOT_FOUND_MSG);
                });
    }

    @Transactional
    public MessageDto sendMessage(Long senderId, Long receiverId, String content) {
        log.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {} –∫ {}", senderId, receiverId);
        log.debug("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", content);

        if (content == null || content.trim().isEmpty()) {
            log.error("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: –ø—É—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
            throw new IllegalArgumentException("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        User sender = findUserOrThrow(senderId, USER_NOT_FOUND_LOG);
        User receiver = findUserOrThrow(receiverId, USER_NOT_FOUND_LOG);

        if (senderId.equals(receiverId)) {
            log.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–∞–º–æ—Å–æ–æ–±—â–µ–Ω–∏—è: {}", senderId);
            throw new IllegalArgumentException("–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ");
        }

        Message message = new Message();
        message.setContent(content);
        message.setSender(sender);
        message.setReceiver(receiver);
        message.setTimestamp(LocalDateTime.now());

        Message savedMessage = messageRepository.save(message);

        log.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ #{} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç {} –∫ {} –≤ {}",
                savedMessage.getId(),
                senderId,
                receiverId,
                savedMessage.getTimestamp().format(TIMESTAMP_FORMATTER));

        return convertToDto(savedMessage);
    }

    @Transactional(readOnly = true)
    public List<MessageDto> getConversation(Long user1Id, Long user2Id) {
        log.info("üìñ –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –º–µ–∂–¥—É {} –∏ {}", user1Id, user2Id);

        User user1 = findUserOrThrow(user1Id, USER_NOT_FOUND_LOG);
        User user2 = findUserOrThrow(user2Id, USER_NOT_FOUND_LOG);

        List<MessageDto> conversation = messageRepository.findConversation(user1, user2)
                .stream()
                .map(this::convertToDto)
                .toList();

        logConversationStats(conversation);
        return conversation;
    }

    private void logConversationStats(List<MessageDto> conversation) {
        log.info("üìä –ù–∞–π–¥–µ–Ω–æ {} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ", conversation.size());
        if (!conversation.isEmpty()) {
            log.debug("–ü–µ—Ä–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}",
                    conversation.stream().limit(3).toList());
        }
    }

    @Transactional
    public void markMessagesAsRead(Long userId, Long interlocutorId) {
        log.info("üëÅÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø–æ–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {} –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ",
                userId, interlocutorId);

        User user = findUserOrThrow(userId, USER_NOT_FOUND_LOG);
        User interlocutor = findUserOrThrow(interlocutorId, INTERLOCUTOR_NOT_FOUND_LOG);

        List<Message> unreadMessages = messageRepository
                .findByReceiverAndSenderAndIsReadFalse(user, interlocutor);

        logUnreadMessagesCount(unreadMessages.size());

        unreadMessages.forEach(message -> {
            message.setRead(true);
            log.debug("–°–æ–æ–±—â–µ–Ω–∏–µ #{} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ", message.getId());
        });

        messageRepository.saveAll(unreadMessages);
        log.info("‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {} –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ", interlocutorId);
    }

    private void logUnreadMessagesCount(int count) {
        log.info("üìå –ù–∞–π–¥–µ–Ω–æ {} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", count);
    }

    @Transactional(readOnly = true)
    public long getUnreadMessagesCount(Long userId) {
        log.debug("üîç –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {}", userId);

        User user = findUserOrThrow(userId, USER_NOT_FOUND_LOG);
        long count = messageRepository.countByReceiverAndIsReadFalse(user);

        log.info("üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∏–º–µ–µ—Ç {} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", userId, count);
        return count;
    }

    private MessageDto convertToDto(Message message) {
        return MessageDto.builder()
                .id(message.getId())
                .content(message.getContent())
                .timestamp(message.getTimestamp())
                .senderId(message.getSender().getId())
                .receiverId(message.getReceiver().getId())
                .isRead(message.isRead())
                .build();
    }
}